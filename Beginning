import random
import math 
def Intro():
    print("Welcome to the game Mindgames.\n In this game you are trapped in your mind.\n\n To escape your mind, talk to the people around the town in order to discover the objective.\n")
    print("You wake up in a place you have never seen.\n When you look around, the barren room has only the basics: A bed, a window, and a wardrobe. To the right of you there seems to be a strange note with the words 'Come see me at my house.'")
    print("Walking outside of the room you realize you are in an Inn.\n Walking outside of the building you see the sign 'Welcome to Grovertown Inn.'") 
    print("When you look around, you realize you're in a small town with a couple of buildings around you.\n To the left there is a Tavern. To the right seems to be street vendors. To the south there is a street.")

def man_conversation1():
    print("Old Man: Welcome to the town of Grovertown. This town has been quite empty for the last 3 years and I seem to be the last one left here. Why are you here?")
    print("\nYou: I don't really know why I am here, I just woke up in the Inn. Is there a way to get out?\n\nOld Man: If you really want to leave I can help you, but I'll need something from you.")
    print("\nYou: And that is?\n\nOld Man: I'll need four things. The first one is a feather, then I need a sycamore seed, a shell, and a piece of volcanic rock.")
    print("\nYou: I guess I can help you.\n\nOld Man: Then you'll need this key. Take it, you'll know what to do with it once you go to sleep.")
    print("\nThe old man gives you a key with a metal pendant in the shape of a cloud in the middle. When you step outside of the Old Man's house, it has already become night. You decide to go back to the Inn where you fall asleep.")

def man_conversation2():
    print("Old Man: Welcome back. I assume you have collected all of the keys?")
    print("\nYou: I have, although ")

def tavern(): 
    print("You walk inside a dark building with a wide door. Although the door was open, it was locked.")

def inn(): 
    print("You head back to the building where you first woke up. There is nothing to do here but sleep.")
    answer = input("Do you want to go to sleep? 'y' for yes, 'n' for no.")
    match answer:
        case 'y':
            dream_map()
        case 'n':
            return False
        
def blacksmith():
    print("You try to enter the small wooden building with a sign over the door saying 'Blacksmith,' but the door is locked.")
    input = input("Press enter to continue.")

def townhall():
    print("You enter the main building of the town where a man sits greeting you. To the left of the man, there is a board with messages and signs involving the town.")
    input = input("Press enter to continue.")

def market(): 
    print("You enter the market where there are street vendors lining the street. Here you can spend your money on potions.")
    Character.store()
    input = input("Press enter to continue.") 

def house2():
    print("You walk to the house across the street from the first house. You try the door, but it is locked.")
    input = input("Press enter to continue.")

def fire_map():
    countkeys = 1 
    print("You enter the next world and it is bright red with flames and steam rising from the floor. Like the other worlds, there are 4 gates around you.")
    try: 
        while(countkeys < 5):
            direction = input("Do you want to go to (1) the north door, (2) the east door, (3) the south door, or (4) the west door")
            match direction: 
                case 1: 
                    if(countkeys == 1):
                        game1()
                        countkeys += 1
                case 2: 
                    if(countkeys == 4):
                        game4()
                        countkeys += 1
                        break
                    else:
                        print("This door is still locked, you can try opening another door.")
                case 3: 
                    if(countkeys == 3):
                        game3()
                        countkeys += 1 
                    else: 
                        print("This door is still locked, you can try opening another door.")
                case 4: 
                    if(countkeys == 2):
                        game2()
                        countkeys += 1 
                    else: 
                        print("This door is still locked, you can try opening another door.")
    except:
        print("Please enter a valid number.")
    print("You have completed all doors in this world and you are sent back to the previous world.")
    return False 
    
def water_map():
    countkeys = 1 
    print("You enter the next world and the floor is made of water and there is a slight breeze. Around you there are 4 gates.")
    try: 
        while(countkeys < 5):
            direction = input("Do you want to go to (1) the north door, (2) the east door, (3) the south door, or (4) the west door")
            match direction: 
                case 1: 
                    if(countkeys == 3):
                        game3() 
                        countkeys += 1
                    else: 
                        print("This door is still locked, you can try opening another door.")
                case 2:
                    if(countkeys == 1):
                        game1()
                        countkeys += 1
                case 3:
                    if(countkeys == 2):
                        game2()
                        countkeys += 1
                    else:
                        print("This door is still locked, you can try opening another door.")
                case 4: 
                    if(countkeys == 4):
                        game4()
                        countkeys += 1
                        break
                    else:
                        print("This door is still locked, you can try opening another door.")
    except: 
        print("Please enter a valid number.")
    print("You have completed all doors in this world and you are sent back to the previous world.")
    return False 
   
    
def ground_map():
    countkeys = 1
    print("You enter into the next world and the ground is dirt and the sky is dark. Like the other worlds, there are four doors around you.")
    try: 
        while(countkeys < 5):
            direction = input("Do you want to go to (1) the north door, (2) the east door, (3) the south door, or (4) the west door")
            match direction:
                case 1:
                    if(countkeys == 4):
                        game4()
                        countkeys += 1
                        break
                    else: 
                        print("This door is still locked, you can try opening another door.")
                case 2:
                    if(countkeys == 3):
                        game3()
                        countkeys += 1
                    else:
                        print("This door is still locked, you can try opening another door.")
                case 3:
                    if(countkeys == 1):
                        game1()
                        countkeys += 1
                case 4:
                    if(countkeys == 2):
                        game2()
                        countkeys += 1
                    else: 
                        print("This door is still locked, you can try opening another door.")
    except:
        ("Please enter a valid number.")
    print("You have completed all doors in this world and you are sent back to the previous world.")
    return False 
    
def sky_map ():
    print("You use your key and are able to go through the gate with a cloud on it. You enter another blue room filled with clouds. Around the room, there are 4 more gates.")
    countkeys = 1
    try: 
        while (countkeys < 5):
            direction = input("Do you want to go to (1) the north door, (2) the east door, (3) the south door, or (4) the west door")
            match direction: 
                case 1:
                    if(countkeys == 3):
                        game3()
                        countkeys += 1
                    else:
                        print("This door is still locked, you can try opening another door.")
                case 2:
                    if(countkeys == 2):
                        game2()
                        countkeys += 1
                    else: 
                        print("This door is still locked, you can try opening another door.")
                case 3:
                    if(countkeys == 4):
                        game4()
                        countkeys += 1
                        break
                    else: 
                        print("This door is still locked, you can try opening another door.")
                case 4: 
                    if(countkeys == 1):
                        game1()
                        countkeys += 1 
    except: 
        print("Please enter a valid number.")

def dream_map():
    worldkeys = 1
    while(worldkeys < 5):
        try:   
            direction1 = input("Where do you want to go? (1) for north, (2) for east, (3) for south, (4) for west?")
            match direction1: 
                case 1: 
                    if(worldkeys == 1): 
                        sky_map() 
                        worldkeys += 1
                case 2: 
                    if(worldkeys == 3):
                        water_map()
                        worldkeys += 1
                    else: 
                        print("This door is still locked, you can try opening another door.")
                case 3: 
                    if(worldkeys == 2):
                        ground_map()
                        worldkeys += 1
                    else:
                        print("This door is still locked, you can try opening another door.")
                case 4: 
                    if(worldkeys == 4):
                        fire_map()
                        worldkeys += 1
                    else:
                        print("This door is still locked you can try opening another door.")
        except: 
            print("Please enter a valid number.")
    return

def game4(): 
    Character.combat()

    print("Fix this")
def game3(num):
    print("This is the thrid puzzle game. In this game, you have to decode the numbers to make a word.\n You can have one hint per code. Please input your number in all lowercase.")
    if (num == 1): 
        answer = "oxygen"
        print("The number you have to decode is: 15.24.25.7.5.14")
        guess = input("What do you think the word is: ").lower()
        d = 0
        while (answer != guess):
            if (d == 0):
                guess_hint = input("Your guess is incorrect. Do you want a hint (h) or guess (g)?").lower()
            else: 
                guess = input("Your guess is incorrect, guess again: ").lower()
            if (guess_hint == "h"):
                print("This is the only hint: It is the second most abundant element in the Earth's atmosphere.")
                d += 1
        print("Your answer is the correct word: oxygen.")
    if (num == 2):
        answer = "gravel"
        print("The number you have to decode is: 20.9.1.5.22.15")
        guess = input("What do you think the word is: ").lower()
        d = 0
        while (answer != guess):
            if (d == 0):
                guess_hint = input("Your guess is incorrect. Do you want a hint (h) or guess (g)?").lower()
            else:
                guess = input("Your guess is incorrect, guess agian: ").lower()
            if (guess_hint == "h"):
                print("This is the only hint: It is made up of a variety of large rocks and once truckload costs anywhere from 25-100 million rocks")
                d += 1
        print("Your answer is the correct word: gravell.")
    if (num == 3):
        answer = "lagoon"
        print("The number you have to decode is: 11.0.6.14.14.13")
        guess = input("What do you think the word is: ").lower()
        d = 0
        while (answer != guess):
            if (d == 0):
                guess_hint = input("Your guess is incorrect. Do you want a hint (h) or guess (g)?").lower()
            else: 
                guess = input("Your guess is incorrect, guess again: ").lower()
            if (guess_hint == "h"):
                print("This is the only hint: The word word relates to water, and it has two of the same vowel.")
                d += 1
        print("Your answer is the correct word: lagoon.")
    if (num == 3):
        answer = "blaze"
        print("The number you have to decode is: 98.108.97.122.101")
        guess = input("What do you think the word is: ").lower()
        d = 0
        while (answer != guess):
            if (d == 0):
                guess_hint = input("Your guess is incorrect. Do you want a hint (h) or guess (g)?").lower()
            else: 
                guess = input("Your guess is incorrect, guess again: ").lower()
            if (guess_hint == "h"):
                print("This is the only hint: The word starts with a b and is a synonym of 'on fire.")
                d += 1
        print("Your answer is the correct word: blaze.")

def game2(num):
    print("This is the second puzzle game. In this game, you have to unscramble to clever anagram. This means that you have to unscramble a word or two to make another word or two.\n You can have one hint per anagram. Please input your answer in all lowercase letters.")
    if(num == 1):
        anagram = "dirty room"
        print("The anagram you have to unscramble is: \"dormitory\"")
        guess = input("Input your guess: ").lower()
        d = 0
        while (guess != anagram):
            if (d == 0):
                guess_hint = input("Your guess is incorrect. Do you want a hint (h) or guess (g)?").lower()
            else: 
                guess = input(("Your guess is incorrect, guess again: ")).lower()
            if (guess_hint == "h"):
                print("This is the only hint: It is two words and it describes a room.")
                d += 1
        if (guess == anagram):
            print("Your anagram is correct, and you have completed game 2.")
    if (num == 2):
        anagram = "elegant man"
        print("The anagram you have to unscramble is: \"a gentleman\"")
        guess = input("Input your guess: ").lower()
        d = 0
        while (guess != anagram):
            if (d == 0):
                guess_hint = input("Your guess is incorrect. Do you want a hint (h) or guess (g)?").lower()
            else: 
                guess = input(("Your guess is incorrect, guess again: ")).lower()
            if (guess_hint == "h"):
                print("This is the only hint: Adjective for a gentleman + \"man\"")
                d += 1
        if (guess == anagram):
            print("Your anagram is correct, and you have completed game 2.")
    if (num == 3):
        anagram = "detect thieves"
        print("The anagram you have to unscramble is: \"the detectives\"")
        guess = input("Input your guess: ").lower()
        d = 0
        while (guess != anagram):
            if (d == 0):
                guess_hint = input("Your guess is incorrect. Do you want a hint (h) or guess (g)?").lower()
            else: 
                guess = input(("Your guess is incorrect, guess again: ")).lower()
            if (guess_hint == "h"):
                print("This is the only hint: It is two words and is what a detective can detect.")
                d += 1
        if (guess == anagram):
            print("Your anagram is correct, and you have completed game 2.")
    if (num == 4): 
        anagram = "twelve plus one"
        print("The anagram you have to unscramble is: \"eleven plus two\"")
        guess = input("Input your guess: ").lower()
        d = 0
        while (guess != anagram):
            if (d == 0):
                guess_hint = input("Your guess is incorrect. Do you want a hint (h) or guess (g)?").lower()
            else: 
                guess = input(("Your guess is incorrect, guess again: ")).lower()
            if (guess_hint == "h"):
                print("This is the only hint: It is three words and is one way to say '11+2'")
                d += 1
            if (guess == anagram):
                print("Your anagram is correct, and you have completed game 2.")
def game1():
    print("In this game you have to guess a number between 1000 and 2000. Each round you will be able to pick if you want a hint or if you want to guess a number.")
    number = random.randint(1000, 2000)
    guess = int(input("Enter your first number: "))
    while(guess != number):
        print("Incorrect guess.")
        choice = input("Do you want to guess (g) or have hint (h)?").lower()
        hint_round = 0
        while(choice == "h"):
            if (hint_round >= 10): 
                print("You have ran out of hints.")
                break 
            if (number % 2 == 0 and hint_round == 0):
                print("The number is even.")
            elif (hint_round == 0): 
                print("The number is odd")
            elif (number % 3 == 0 and hint_round == 1):
                print("The number is divisible by 3.")
            elif (hint_round == 1): 
                print("The number is not divisible by 3.")
            elif (number % 5 == 0 and hint_round == 2):
                print("The number is divisible by 5.")
            elif (hint_round == 2): 
                print("The number is not divisible by 5.")
            elif (number >= 1776 and hint_round == 3):
                print("The number is greater than the year the United States gained independence from Britain.")
            elif (hint_round == 3): 
                print("The number is less than the year the United States gained independence from Britain.")
            elif (number <= 1500 and hint_round == 4):
                print("The number is less than the number 1500.")
            elif (hint_round == 4):
                print("The number is greater than the year 1500.")
            elif (number <= 100*10 and hint_round == 5):
                print("The number is less than 100*10.")
            elif (hint_round == 5):
                print ("The number is greater than 100*10")
            elif (number % 10 != 0 and hint_round == 6):
                print("The number is not divisible by 10.")
            elif (hint_round == 6):
                print ("The number is divisible by 10.")
            elif (number >= 1492 and number <= 1776 and hint_round == 7):
                print("The number is between the years Columbus reached the United States and when the United States declared independence.")
            elif (hint_round == 7):
                print ("The number is not between the yars Columbus reached the United States and when the United States declared independence.")
            elif (number >= 1914 and hint_round == 8):
                print("The number is greater than the first year of WW1.")
            elif (hint_round == 8):
                print("The number is less than the first year of WW1.")
            elif (ifprime(number) and hint_round == 9):
                print("The number is a prime number.")
            elif (hint_round == 9):
                print("The number is not a prime number.")

        hint_round += 1 
        if (hint_round <= 10):
            choice = input("Do you want to guess (g) or have a hint (h)?").lower()

    while (choice == "g"):
        guess = int(input("Enter your guess: "))
        if (guess < number):
            print("Your guess is too low.")
            choice = input("Do you want to guess (G) or have a hint (H).")
        elif (guess > number): 
            print("Your guess is too high.") 
            choice = input("Do you want to guess (G) or have a hint (H).")
        else: 
            print("You guessed the correct number, and you have completed the first game.")
            break
    
    def ifprime(n):
        if (number == 2 or number == 3):
            return True
        if (n % 2 == 0 or n < 2):
            return False 
            for i in range (3, int(n**0.5) + 1, 2):
                if (n % i == 0):
                    return False 

def distribute_stat(): 
    print("Before you start playing, you are able to distribute 10 stat points into 4 different charagories: attack, speed, defense, and crit chance.\n Unfortunately, you will be unable to change these once you distribute the points.\n These points will determine how your battles go.")
    totalstatpts = 10 
    attacklvl = 0
    speed = 0
    defense = 0 
    critchance = 0
    count = 0
    while (count != 1):
        try: 
            attacklvl = input("How many points do you want for attack?")
            if(attacklvl > 10):
                print("You only have 10 stat points to distribute, try again.")
            if(attacklvl < 0):
                print("You cannot have a negative attack level, try again.")
            else:
                totalstatpts -= attacklvl 
                count += 1
        except: 
            print("Enter a valid number.")
    while (count != 2):
        print("You have {statpts} remaining.".format(statpts = totalstatpts))
        try: 
            speed = input("How many points do you want for speed?") 
            if(speed > totalstatpts):
                print("You only have {stat} points to distribute, try again.")
            if(speed < 0):
                print("You cannot have a negative speed level, try again.")
            else: 
                totalstatpts -= speed 
                count += 1
        except: 
            print("Enter a valid number.") 
    while (count != 3):
        try: 
            defense = input("How many points do you want for defense?")
            if(defense > totalstatpts):
                print("You only have {stat} points to distribute, try again.")
            if(speed < 0):
                print("You cannot have a negative defense, try again.")
            else:
                totalstatpts -= defense 
                count += 1
        except:
            print("Enter a valid number.")
    while (count != 4):
        try: 
            critchance = input("How many points do you want for your crit chance?")
            if(critchance > totalstatpts):
                print("You only have {stat} points to distribute, try again.")
            if(critchance < 0):
                print("You cannot have a negative crit chance, try again.")
            else:
                totalstatpts -= speed 
                count += 1
        except:
            print("Enter a valid number.")
    return(Character(attacklvl, speed, defense, critchance))
     
#Main
distribute_stat() 
Intro()
count = 0
while(count < 1):
    try:
        direction = input("There are multiple areas you can go in this town. Do you want to go to (1) the tavern, (2) the inn, (3) the market, (4) the blacksmith, (5) the townhall, (6) the first house, or (7) the second house?")
        match direction: 
            case 1: 
                tavern()
            case 2:
                inn()
            case 3:
                market()
            case 4: 
                blacksmith()
            case 5:
                townhall()
            case 6:
                man_conversation1()
                count += 1
            case 7:
                house2() 
    except: 
        print("Please enter a valid number.")

dream_map()
print("You have successfully completed all puzzles and defeated all the bosses. You now have all four things that the man requested.")
count2 = 0 
while(count < 1):
    try:
        direction = input("Now that you have all of the items, where do you want to go: (1) the tavern, (2) the inn, (3) the market, (4) the blacksmith, (5) the townhall, (6) the first house, or (7) the second house?")
        match direction: 
            case 1:
                tavern()
            case 2:
                inn()
            case 3:
                market()
            case 4:
                blacksmith()
            case 5:
                townhall()
            case 6:
                man_conversation2()
                count2 += 1
            case 7:
                house2()
    except: 
        print("Please enter a valid number.")
print("You have successfully completed the game, thank you for playing.")

class Character():
    def _init_(self, attacklvl, speed, defense, crit_d):
        self.attacklvl = attacklvl
        self.speed = speed
        self.defense = defense 
        self.crit_d = crit_d
        self.health = 100
        self.maxhealth = 100
        self.money = 0
        self.potions = 0
        self.potionsused = 0
    
    def _repr_(self):
        print("These are your current stats:\nHealth: {health}\n Crit damange: {crit_d}\nDefense: {defense}\n Speed: {speed}\nAttack: {attack}\n".format(health = self.health, crit_d = self.crit_d, defense = self.defense, speed = self.speed, attack = self.attacklvl))
        print("You have {money} money, and {potions} potions.".format(money = self.money, potions = self.potions))
    
    def store(self): 
        while True: 
            try: 
                tobuy = input("How many potions do you want to buy. Currently you have {potions}, and {money} dollars.".format(potions = self.potions, money = self.money ))    
                if(tobuy == 0):
                    print("The vendors thank you for visiting your shop and you return to the main square.")
                    break
                if(tobuy * 10 > self.money):
                    print("You do not have enough money to buy this many potions, try again.")
                    continue
                else:
                    print("You are successfully able to buy {amount} potions.".format(amount = tobuy))
                    self.money -= tobuy * 10 
                    self.potions += tobuy 
                    return False
            except: 
                print("Please enter a valid number.")

    def usepotion(self):
        if (self.potions > 0):
            if (self.health == self.maxhealth):
                answer = input("You are at max health, using a potion will not have any affect. Do you still want to use a potion? 'y' for yes, 'n' for no").lower()
                match answer: 
                    case 'y': 
                        self.useapotion()
                        self.potions -= 1
                        self.potionsused += 1
                        return True 
                    case 'n': 
                        return False 
            else:
                answer = input("You can use a potion, do you want to use one? 'y' for yes, 'n' for no.").lower()
                match answer:
                    case 'y':
                        self.useapotion()
                        self.potions -= 1
                        self.potionsused += 1
                        return True
                    case 'n': 
                        return False
        else: 
            print("You do not have a potion to use.") 

    def useapotion(self):
        self.health += random.randint(1,5)
        if (self.health >= self.maxhealth):
            self.health = self.maxhealth
        print("Your health status is now {health}.".format(health = self.health)) 
    
    def attackboss(self, boss): 
        ifdodge = self.dodge()
        if(ifdodge): 
            print("The boss was able to dodge your attack. You did not deal any damage")
            return True
        else: 
            crit = self.crit()
            if(crit):
                if(self.health >= 50):
                    (Boss.losehealth((self.maxhealth * 0.5) - (self.health * 0.50)))
                    if (Boss.health <= 0):
                        return False 
                    else:
                        return True
                else:
                    (Boss.losehealth(self.health * .75))
                    if(Boss.health <= 0):
                        return False 
                    else:
                        return True
            else: 
                (Boss.losehealth(10))
                if(Boss.health <= 0):
                    return False

    def dodge(self):
        if(random.randint(1, 100) < self.speed*4):
            return True
        else: 
            return False
    
    def crit(self):
        chance = random.randint(1,10) * self.crit_d
        if(chance < 40):
            print("You were not able to land critical damage.")
            return False
        if(chance >= 40):
            print("You were able to land a critical strike.")
            return True

    def losehealth(self, minus_health): 
        health = self.health
        if (health <= 0):
            print("You have been defeated by the boss. You are able to retry the fight.")
        else: 
            health -= minus_health
            print("You have been dealt damage. Your new health is {health}.".format(health = health))
            self.health = health 

    def combat(self):
        crit = random.randint(1,7)
        attack = random.randint(1,7)
        dodge = random.randint(1,7)
        defense = random.randint(1,7)
        speed = random.randint(1,7)
        boss = Boss(100, 100, crit, attack, dodge, defense, speed)
        print("The boss has {crit} number, {attack} number, {dodge} number, {defense} number, and {speed} number.".format(crit = crit, attack = attack, dodge = dodge, defense = defense, speed = speed))
        while True:
            print("Your current stats are {healthpts}, and {potions} potions to use.".format(healthpts = self.health, potions = self.potions))
            try: 
                options = input("You have two options. Do you want to (1) attack the boss, or (2) use a potion to restore some health?")
                match options: 
                    case 1: 
                        fight = self.attackboss(boss)
                        print("The bosses health is now {health}.".format(health = Boss.health()))
                        if(Boss.health() < 0):
                            print("You have successfully beat the boss.")
                            self.health = 100
                            self.money += random.randint(10, 50) 
                            print("Your health has gone back to 100. You also gained {money} dollars from the boss.".format(money = self.money))
                        if(fight): 
                            print("The boss is attacking you.")
                            Boss.attackcharacter()
                            if(self.health > 0):
                                continue
                            else:
                                return False
                        else: 
                            print("Good job, you defeated the boss.")
                            print("")
                    case 2:
                        self.usepotion()
                        continue
            except: 
                print("Please eneter a valid number.")
                continue 


class Boss():
    def _init_(self, health, maxhealth, crit, attack, dodge, defense, speed):
            self.health = health
            self.maxhealth = maxhealth 
            self.critchance = crit
            self.attack = attack 
            self.dodgeattack = dodge 
            self.defense = defense 
            self.speed = speed 

    def crit(self): 
        if(random.randint(1,100) <= self.critchance * 5):
            print("The boss landed a critical hit.")
            return True
        else:
            return False
        
    def dodge(self):
        if(random.randint(1, 100) < self.speed*4):
            return True
        else: 
            return False

    def attackcharacter(self): 
        ifdodge = self.dodgeattack()
        if(ifdodge): 
            print("You were able to dodge the attack.")
        else: 
            crit = self.critchance()
            if(crit):
                if(self.health >= 50):
                    (Character.losehealth((self.maxhealth * 0.5) - (self.health * 0.50)))
                else: 
                    (Character.losehealth(self.health * .75))
            else: 
                (Character.losehealth(10))
        print("Your health is now {health}.".format(health = Character.health()))
      
    def losehealth(self, minus_health):
        health = self.health
        if(health <= 0):
            print("You have defeated the boss. Good job.")
        else:
            health -= minus_health
            print("The boss lost health. The bosses new health is {health}.".format(health = health))
